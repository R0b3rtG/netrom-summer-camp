@rendermode InteractiveServer

@inject IRepositoryFestival RepositoryFestival
@inject IRepositoryBand RepositoryBand

@using BlazorApp1.Entities
@using BlazorApp1.Repositories.Interfaces

<Modal @ref="_modalRef">
	<ModalContent Centered>
		<ModalHeader>
			<ModalTitle>Edit Lineup</ModalTitle>
			<CloseButton />
		</ModalHeader>
		<ModalBody>
			<Label>Search by name</Label>
			<TextEdit Text="@_searchFilter" TextChanged="FilterBands"></TextEdit>
			<div style="display: flex; margin: 1rem 0; gap: 1rem;">
				<div style="width: 100%;">
					<h5 style="text-align: center; margin-bottom: 1rem;">Search Results</h5>
					<div style="height: 250px; width: 100%; overflow-block: scroll;">
						@if (_filterResults != null)
						{
							@foreach (Band band in _filterResults)
							{
								<p style="background-color: #eee; padding: .3rem .7rem; border-radius: 10px;" @onclick="() => moveToLineup(band)">@band.Name</p>
							}
						}
					</div>
				</div>
				<div style="width: 100%;">
					<h5 style="text-align: center; margin-bottom: 1rem;">Lineup</h5>
					<div style="height: 250px; width: 100%; overflow-block: scroll;">
						@foreach (FestivalBand festivalBand in _festivalBands)
						{
							<p style="background-color: #eee; padding: .3rem .7rem; border-radius: 10px;" @onclick="() => removeFromLineup(festivalBand)">@festivalBand.Band?.Name</p>
						}
					</div>
				</div>
			</div>
		</ModalBody>
		<ModalFooter>
			<Button Color="Color.Secondary" Clicked="HideModal">Close</Button>
			<Button Color="Color.Primary" Clicked="HandleSave">Save Changes</Button>
		</ModalFooter>
	</ModalContent>
</Modal>

@code {
	private Modal _modalRef = new();
	private Festival _festival = new();
	private List<FestivalBand> _festivalBands = new();

	private string _searchFilter = string.Empty;
	private List<Band> _filterResults = new();
	private List<Band> _availableBands = new();

	[Parameter] public EventCallback OnChange { get; set; }

	private void moveToLineup(Band band)
	{
		FestivalBand newFestivalBand = new FestivalBand
		{
			FestivalId = _festival.Id,
			BandId = band.Id,
			Band = band,
			Festival = _festival,
			Order = _festivalBands.Count + 1
		};

		_festivalBands.Add(newFestivalBand);
		_filterResults = Filter();
		StateHasChanged();
	}

	private void removeFromLineup(FestivalBand festivalBand)
	{
		_festivalBands = _festivalBands.Where(fb => festivalBand != fb).ToList();
		for (int i = 0; i < _festivalBands.Count; i++)
		{
			_festivalBands[i].Order = i + 1;
		}
		_filterResults = Filter();
		StateHasChanged();
	}

	private void FilterBands(string newText)
	{
		_searchFilter = newText;
		_filterResults = Filter();
		StateHasChanged();
	}

	private List<Band> Filter()
	{
		return _availableBands
			.Where(band => band.Name.ToLower()
			.Contains(_searchFilter.ToLower())
			&& !_festivalBands.Any(fb => fb.Band?.Name == band.Name))
			.ToList();
	}

	public async Task ShowModal(Festival festival)
	{
		_festival = festival;
		_festivalBands = festival.FestivalBands.ToList();

		_availableBands = (await RepositoryBand.GetAllAsync()).ToList();
		_filterResults = Filter();

		await _modalRef.Show();
	}

	private void HideModal()
	{
		_modalRef.Hide();
	}

	private async Task HandleSave()
	{
		_festival.FestivalBands = _festivalBands;
		RepositoryFestival.Update(_festival);
		await RepositoryFestival.SaveChangesAsync();
		await OnChange.InvokeAsync();

		await _modalRef.Hide();
	}
}