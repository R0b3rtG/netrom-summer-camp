@rendermode InteractiveServer

@inject IRepositoryFestival RepositoryFestival

@using BlazorApp1.Entities
@using BlazorApp1.Repositories.Interfaces

<Modal @ref="_modalRef">
	<ModalContent Centered>
		<ModalHeader>
			<ModalTitle>LineUp Edit</ModalTitle>
			<CloseButton />
		</ModalHeader>
		<ModalBody>
			@* <p>@_festivalBands.Count</p>
			<DropContainer TItem="DropItem" Items="@items" ItemsFilter="@((item, dropZone) => item.Group == dropZone)" ItemDropped="@ItemDropped" Flex="Flex.Wrap.Grow.Is1">
				<ChildContent>
					<DropZone TItem="DropItem" Name="" Border="Border.Rounded" Background="Background.Light" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
						<Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">Basket</Heading>
					</DropZone>
					<DropZone TItem="DropItem" Name="Fruit" DropAllowed="@((item) => item.Fruit)" Border="Border.Rounded" Background="Background.Light" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
						<Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">Fruit</Heading>
					</DropZone>
					<DropZone TItem="DropItem" Name="Vegetable" DropAllowed="@((item) => !item.Fruit)" Border="Border.Rounded" Background="Background.Light" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
						<Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">Vegetable</Heading>
					</DropZone>
				</ChildContent>
				<ItemTemplate>
					<Card Shadow="Shadow.Default" Margin="Margin.Is3.OnY">
						<CardBody>
							<Image Source="@context.Image" Text="DragDrop image example" Style="width:48px;height:48px;" />
							@context.Name
						</CardBody>
					</Card>
				</ItemTemplate>
			</DropContainer> *@
			@foreach(Band band in _bands)
			{
				<p>@band.Name</p>
			}
		</ModalBody>
		<ModalFooter>
			<Button Color="Color.Secondary" Clicked="HideModal">Close</Button>
			<Button Color="Color.Primary" Clicked="HandleSave">Save Changes</Button>
		</ModalFooter>
	</ModalContent>
</Modal>

@code {
	private Modal _modalRef = new();
	private Festival _festival = new();
	private List<Band> _bands = new();

	[Parameter] public EventCallback OnChange { get; set; }

	public void ShowModal(Festival festival)
	{
		_festival = festival;
		_bands = festival.FestivalBands.Select(fb => fb.Band).ToList();
		_modalRef.Show();
	}

	private void HideModal()
	{
		_modalRef.Hide();
	}

	private async Task HandleSave()
	{
		RepositoryFestival.Update(_festival);
		await RepositoryFestival.SaveChangesAsync();
		await OnChange.InvokeAsync();

		await _modalRef.Hide();
	}

	public class DropItem
	{
		public string Name { get; init; }

		public string Group { get; set; }

		public string Image { get; set; }

		public bool Fruit { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		// List<Festival> festivals = (await RepositoryFestival.GetAllFestivalWithBands()).ToList();
		// _festivalBands = festivals.Where(f => f.Name == _festival.Name).ToList();
		// _festivalBands = festivals.Select(f => f.FestivalBands.ToList()).ToList();
	}
	
	private List<Festival> _festivalBands = new();

	private List<DropItem> items = new()
	{
		new DropItem() { Name = "Apple", Group = "Basket", Image = "img/fruit/apple.png", Fruit = true },
		new DropItem() { Name = "Bananas", Group = "Basket", Image = "img/fruit/bananas.png", Fruit = true },
		new DropItem() { Name = "Lemon", Group = "Fruit", Image = "img/fruit/lemon.png", Fruit = true },
		new DropItem() { Name = "Broccoli", Group = "Basket", Image = "img/fruit/broccoli.png" },
		new DropItem() { Name = "Strawberry", Group = "Fruit", Image = "img/fruit/strawberry.png", Fruit = true },
		new DropItem() { Name = "Cherry", Group = "Basket", Image = "img/fruit/cherry.png", Fruit = true },
		new DropItem() { Name = "Cabbage", Group = "Vegetable", Image = "img/fruit/cabbage.png" },
	};

	private Task ItemDropped(DraggableDroppedEventArgs<DropItem> dropItem)
	{
		dropItem.Item.Group = dropItem.DropZoneName;
		return Task.CompletedTask;
	}
}