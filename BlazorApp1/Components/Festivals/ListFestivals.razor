@page "/list-festivals"
@rendermode InteractiveServer

@inject IRepositoryFestival RepositoryFestival
@inject NavigationManager NavManager

@using Microsoft.AspNetCore.Components.Authorization
@using BlazorApp1.Entities
@using BlazorApp1.Repositories.Interfaces
@using Blazorise.DataGrid
@using System.Globalization
@using BlazorApp1.Components.Bands

<PageTitle>Festivals</PageTitle>

<div class="festivals-container">
	@if (_festivals != null)
	{
		@foreach (Festival festival in _festivals)
		{
			<div class="festival-card">
				<div class="festival-img"></div>
				@* <img class="festival-img" alt="Festival Image" /> *@
				<p class="festival-title">@festival.Name</p>
				<p class="festival-start">@festival.Location</p>
				<p class="festival-start">Starts: @festival.StartDate?.ToString("D", CultureInfo.CreateSpecificCulture("en-US"))</p>
				<p class="festival-end">Ends: @festival.EndDate?.ToString("D", CultureInfo.CreateSpecificCulture("en-US"))</p>
				<AuthorizeView Roles="admin">
					<Authorized>
						<div class="festival-actions">
							<Button Color="Color.Secondary" Clicked="() => ShowEditModal(festival)">
								Edit
							</Button>
							<Button Color="Color.Primary" Clicked="() => ShowLineUpModal(festival)">
								LineUp
							</Button>
							<Button Color="Color.Danger" Clicked="() => DeleteFestival(festival)">
								Delete
							</Button>
						</div>
					</Authorized>
				</AuthorizeView>
			</div>	
		}
	}
</div>

<Button Color="Color.Primary" Clicked="ShowCreateModal">Add New Festival</Button>

<EditFestival @ref="_editFestivalComponent" OnChange="ReloadList"></EditFestival>
<CreateFestival @ref="_createFestivalComponent" OnChange="ReloadList"></CreateFestival>
<EditLineUp @ref="_editLineUpComponent" OnChange="ReloadList"></EditLineUp>

@code {
	private List<Festival> _festivals;
	private Festival _festival = new();

	private EditFestival _editFestivalComponent = new();
	private CreateFestival _createFestivalComponent = new();
	private EditLineUp _editLineUpComponent = new();

	private void ShowEditModal(Festival festival)
	{
		_editFestivalComponent.ShowModal(festival);
	} 

	private void ShowCreateModal()
	{
		_createFestivalComponent.ShowModal();
	}

	private void ShowLineUpModal(Festival festival)
	{
		_editLineUpComponent.ShowModal(festival);
	}

	private async Task ReloadList()
	{
		_festivals = (await RepositoryFestival.GetAllAsync()).ToList();
	}

	protected override async Task OnInitializedAsync()
	{
		_festivals = (await RepositoryFestival.GetAllFestivalWithBands()).ToList();
		Console.WriteLine(_festivals);
	}

	public async Task DeleteFestival(Festival festival)
	{
		RepositoryFestival.Delete(festival);
		await RepositoryFestival.SaveChangesAsync();
		_festivals = _festivals?.Where(f => f.Id != festival.Id).ToList();
		StateHasChanged();
	}
}
